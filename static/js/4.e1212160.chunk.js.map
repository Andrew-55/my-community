{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","hoc/withAuthRedirect.js","components/Dialogs/DialogsConteiners.js"],"names":["module","exports","DialogItem","props","className","classes","dialog","active","to","id","name","Message","message","maxLenght20","maxLenghtCreator","AddMessageReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","Texterea","placeholder","validate","required","Dialogs","DialogsElements","dialogsPage","dialogs","map","key","MessangesElements","messages","messageIt","isAuth","dialogsItems","values","addMessage","newMessageText","mapStateToPropsForRedirect","state","auth","DialogsConteiner","compose","connect","dispatch","Component","RedirectComponent","this","React"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,+FCapMC,EATI,SAACC,GAChB,OACI,yBAAKC,UAAS,UAAKC,IAAQC,OAAb,YAAuBD,IAAQE,SACzC,kBAAC,IAAD,CAASC,GAAE,mBAAcL,EAAMM,KAAQN,EAAMO,QCM1CC,EAVC,SAACR,GAEb,OACI,yBAAKC,UAAWC,IAAQO,SACnBT,EAAMS,U,yCC4BbC,EAAcC,YAAiB,IAgB/BC,EAAsBC,YAAU,CAElCC,KAAM,wBAFkBD,EAdL,SAACb,GACpB,OACI,0BAAMe,SAAUf,EAAMgB,cAClB,6BACI,kBAACC,EAAA,EAAD,CAAOC,UAAWC,IAAUZ,KAAK,iBAAiBa,YAAa,qBAC3DC,SAAU,CAACC,IAAUZ,MAE7B,6BACI,iDAWDa,EAhDC,SAACvB,GAEb,IAAIwB,EAAkBxB,EAAMyB,YAAYC,QAAQC,KAAI,SAAAxB,GAAM,OAAI,kBAAC,EAAD,CAAYI,KAAMJ,EAAOI,KAAMqB,IAAKzB,EAAOG,GAAIA,GAAIH,EAAOG,QACpHuB,EAAoB7B,EAAMyB,YAAYK,SAASH,KAAI,SAAAI,GAAS,OAAI,kBAAC,EAAD,CAAStB,QAASsB,EAAUtB,QAASmB,IAAKG,EAAUzB,GAAIA,GAAIyB,EAAUzB,QAO1I,OAAKN,EAAMgC,OAKP,yBAAK/B,UAAWC,IAAQwB,SACpB,yBAAKzB,UAAWC,IAAQ+B,cACpB,6BAAMT,IAEV,yBAAKvB,UAAWC,IAAQ4B,UACpB,6BAAMD,GACN,kBAACjB,EAAD,CAAqBG,SAfR,SAACmB,GACtBlC,EAAMmC,WAAWD,EAAOE,qBAKhB,kBAAC,IAAD,CAAU/B,GAAI,Y,uDCjB1BgC,EAA6B,SAACC,GAE9B,MAAO,CACHN,OAAQM,EAAMC,KAAKP,SCcrBQ,EAAmBC,YACrBC,aAfkB,SAACJ,GACnB,MAAO,CACHb,YAAaa,EAAMb,gBAIF,SAACkB,GACtB,MAAO,CACHR,WAAY,SAACC,GACTO,EAASR,YAAWC,UDLA,SAACQ,GAAe,IACtCC,EADqC,iLAGnC,OAAKC,KAAK9C,MAAMgC,OAIT,kBAACY,EAAcE,KAAK9C,OAFf,kBAAC,IAAD,CAAUK,GAAI,eALS,GACX0C,IAAMH,WAWtC,OADoCF,YAAQL,EAARK,CAAoCG,KCDnDJ,CAGvBlB,GAEaiB","file":"static/js/4.e1212160.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"dialogsItems\":\"Dialogs_dialogsItems__2sNe2\",\"active\":\"Dialogs_active__2sQhs\",\"dialog\":\"Dialogs_dialog__lk_cw\",\"messages\":\"Dialogs_messages__1w_Up\",\"message\":\"Dialogs_message__1xIDh\"};","import React from 'react';\nimport classes from './../Dialogs.module.css';\nimport { NavLink } from 'react-router-dom';\n\n\nconst DialogItem = (props) => {\n    return (\n        <div className={`${classes.dialog} ${classes.active}`}>\n            <NavLink to={`/dialogs/${props.id}`} >{props.name}</NavLink>\n        </div>\n    )\n}\n\n\nexport default DialogItem;\n","import React from 'react';\nimport classes from './../Dialogs.module.css';\n\n\nconst Message = (props) => {\n\n    return (\n        <div className={classes.message}>\n            {props.message}\n        </div>\n    )\n}\n\n\nexport default Message;\n","import React from 'react';\nimport classes from './Dialogs.module.css';\nimport DialogItem from './DialogItem/DialogItem';\nimport Message from './Message/Message';\nimport { Redirect } from 'react-router-dom';\nimport { Field, reduxForm } from 'redux-form';\nimport { Texterea } from '../common/FormsControls/FormsControls';\nimport { required, maxLenghtCreator } from '../../redux/utils/validators/validators';\n\nconst Dialogs = (props) => {\n\n    let DialogsElements = props.dialogsPage.dialogs.map(dialog => <DialogItem name={dialog.name} key={dialog.id} id={dialog.id} />);\n    let MessangesElements = props.dialogsPage.messages.map(messageIt => <Message message={messageIt.message} key={messageIt.id} id={messageIt.id} />)\n\n\n    let onNewMessageChange = (values) => {\n        props.addMessage(values.newMessageText)\n    }\n\n    if (!props.isAuth) {\n\n        return (<Redirect to={'/login'} />)\n    }\n    return (\n        <div className={classes.dialogs}>\n            <div className={classes.dialogsItems}>\n                <div>{DialogsElements}</div>\n            </div>\n            <div className={classes.messages}>\n                <div>{MessangesElements}</div>\n                <AddMessageReduxForm onSubmit={onNewMessageChange} />\n            </div>\n        </div>\n    )\n}\n\nconst maxLenght20 = maxLenghtCreator(20);\n\nconst AddMessageForm = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field component={Texterea} name=\"newMessageText\" placeholder={'Enter your message'}\n                    validate={[required, maxLenght20]} />\n            </div>\n            <div>\n                <button >Add post</button>\n            </div>\n        </form>\n    )\n}\n\nconst AddMessageReduxForm = reduxForm({\n    // a unique name for the form\n    form: 'dialogAddMessageForm'\n})(AddMessageForm)\n\nexport default Dialogs;\n","import React from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nlet mapStateToPropsForRedirect = (state) => {\n\n    return {\n        isAuth: state.auth.isAuth\n    }\n}\n\nexport const withAuthRedirect = (Component) => {\n    class RedirectComponent extends React.Component {\n        render() {\n            if (!this.props.isAuth) {\n\n                return (<Redirect to={'/login'} />)\n            }\n            return <Component {...this.props} />\n        }\n    }\n\n    let ConnectAuthRedirectConteiners = connect(mapStateToPropsForRedirect)(RedirectComponent);\n    return ConnectAuthRedirectConteiners;\n}","import { addMessage } from '../../redux/dialogsReducer';\nimport Dialogs from './Dialogs';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\n\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\n\nlet mapStateToProps = (state) => {\n    return {\n        dialogsPage: state.dialogsPage,\n    }\n}\n\nlet mapDispatchToProps = (dispatch) => {\n    return {\n        addMessage: (newMessageText) => {\n            dispatch(addMessage(newMessageText));\n        }\n    }\n}\n\nconst DialogsConteiner = compose(\n    connect(mapStateToProps, mapDispatchToProps),\n    withAuthRedirect\n)(Dialogs)\n\nexport default DialogsConteiner;\n"],"sourceRoot":""}
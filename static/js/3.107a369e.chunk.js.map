{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPost/MyPosts.module.css","components/Profile/MyPost/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusHooks.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPost/Post/Post.jsx","components/Profile/MyPost/MyPosts.jsx","components/Profile/MyPost/MyPostsConteiners.js","components/Profile/Profile.jsx","components/Profile/ProfileConteiners.js"],"names":["module","exports","ProfileStatusHooks","props","useState","editMove","setEditMove","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileInfo","profile","className","classes","descriptionBlock","src","photos","large","alt","Post","item","message","count","maxLenght10","maxLenghtCreator","AddNewPostReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","Texterea","name","placeholder","validate","required","MyPosts","React","memo","postsElements","posts","reverse","map","post","likecount","myPostsBlock","values","addPost","newPostText","MyPostsConteiner","connect","state","profilePage","dispatch","addPostActionCreator","Profile","store","ProfileConteiners","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.107a369e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3cd8Y\",\"img\":\"ProfileInfo_img__1lpBU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myPostsBlock\":\"MyPosts_myPostsBlock__3GdsE\",\"posts\":\"MyPosts_posts__Vx8ZF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__ueSlo\"};","import React, { useState, useEffect } from 'react';\n//import classes from './ProfileInfo.module.css';\n\nconst ProfileStatusHooks = (props) => {\n\n    let [editMove, setEditMove] = useState(false);\n    let [status, setStatus] = useState(props.status);\n\n    useEffect(() => {\n        setStatus(props.status);\n    }, [props.status]);\n\n    const activeteEditMode = () => {\n        setEditMove(true);\n    }\n    const deActiveteEditMode = () => {\n        setEditMove(false);\n        props.updateStatus(status)\n    }\n    const onStatusChange = (e) => {\n\n        setStatus(\n            e.currentTarget.value\n        );\n    }\n\n    return (\n        <div>\n            {!editMove &&\n                <div>\n                    <span onDoubleClick={activeteEditMode}  >{props.status || '---'}</span>\n                </div>\n            }\n            {\n                editMove &&\n                <div>\n                    <input onChange={onStatusChange} autoFocus={true} onBlur={deActiveteEditMode}\n                        value={status}\n\n                    />\n                </div>\n            }\n        </div >\n    )\n}\n\nexport default ProfileStatusHooks;\n","import React from 'react';\nimport classes from './ProfileInfo.module.css';\nimport Preloarder from '../../common/Preloarder/Preloader';\nimport ProfileStatusHooks from './ProfileStatusHooks';\n\nconst ProfileInfo = ({ profile, status, updateStatus }) => {\n\n    if (!profile) {\n        return <Preloarder />\n    }\n    return (\n        <div>\n\n            {/* <div>\n                <img className={classes.img} src={props.imgUrl} alt='' />\n            </div> */}\n            <div className={classes.descriptionBlock}>\n                <img src={profile.photos.large} alt='' />\n                <ProfileStatusHooks status={status} updateStatus={updateStatus} />\n            </div>\n        </div>\n    )\n}\n\nexport default ProfileInfo;\n","import React from 'react';\nimport classes from './Post.module.css';\n\nconst Post = (props) => {\n    return (\n\n        <div className={classes.item}>\n            <img src='https://klike.net/uploads/posts/2019-03/1551511862_28.jpg' alt='' />\n            {props.message}\n            <div>\n                <span>like {props.count}</span>\n            </div>\n        </div>\n\n    )\n}\n\nexport default Post;\n","import React from 'react';\nimport classes from './MyPosts.module.css';\nimport Post from './Post/Post';\n//import { Redirect } from 'react-router-dom';\nimport { Field, reduxForm } from 'redux-form';\nimport { required, maxLenghtCreator } from '../../../redux/utils/validators/validators';\nimport { Texterea } from '../../common/FormsControls/FormsControls';\n\n\nconst maxLenght10 = maxLenghtCreator(10);\n\nconst AddNewPostForm = (props) => {\n\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field component={Texterea} name=\"newPostText\" placeholder={'Post add'}\n                    validate={[required, maxLenght10]} />\n            </div>\n            <div>\n                <button >Add post</button>\n            </div>\n        </form>\n    )\n}\n\nconst AddNewPostReduxForm = reduxForm({\n    // a unique name for the form\n    form: 'ProfileAddNewPostForm'\n})(AddNewPostForm)\n\n\nconst MyPosts = React.memo((props) => {\n\n    let postsElements = [...props.posts].reverse().map(post => <Post message={post.message} count={post.likecount} />)\n\n    let onAddPost = (values) => {\n        props.addPost(values.newPostText);\n    }\n\n    return (\n\n        <div className={classes.myPostsBlock}>\n            <h3>My posts</h3>\n            <AddNewPostReduxForm onSubmit={onAddPost} />\n            <div className={classes.posts}>\n                {postsElements}\n            </div>\n        </div>\n    )\n});\n\nexport default MyPosts;\n","//import React from 'react';\nimport { addPostActionCreator } from '../../../redux/profileReducer';\nimport MyPosts from './MyPosts';\nimport { connect } from 'react-redux';\n\n\n\nlet mapStateToProps = (state) => {\n    return {\n        posts: state.profilePage.posts,\n        newPostText: state.profilePage.newPostText\n    }\n}\n\nlet mapDispatchToProps = (dispatch) => {\n    return {\n        addPost: (newPostText) => {\n            dispatch(addPostActionCreator(newPostText));\n        }\n    }\n}\n\n\nconst MyPostsConteiner = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\n\nexport default MyPostsConteiner;\n","import React from 'react';\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\nimport MyPostsConteiner from './MyPost/MyPostsConteiners';\n\n\nconst Profile = ({ profile, status, updateStatus, store }) => {\n\n    return (\n        <div className=''>\n            <ProfileInfo profile={profile} status={status} updateStatus={updateStatus} />\n            <MyPostsConteiner store={store} />\n        </div >\n    )\n}\n\nexport default Profile;\n","import React from 'react';\nimport Profile from './Profile';\nimport { connect } from 'react-redux';\nimport { getUserProfile, getStatus, updateStatus } from '../../redux/profileReducer';\nimport { withRouter } from 'react-router-dom';\n//import { withAuthRedirect } from '../../hoc/withAuthRedirect';\nimport { compose } from 'redux';\n\n\nclass ProfileConteiners extends React.Component {\n\n\n    componentDidMount() {\n        let userId = this.props.match.params.userId;\n        if (!userId) {\n            userId = this.props.authorizedUserId;\n            if (!userId) {\n                this.props.history.push(\"/login\");\n            }\n        }\n        this.props.getUserProfile(userId);\n        this.props.getStatus(userId);\n    }\n\n    render() {\n\n        return (\n            <div className=''>\n                <Profile {...this.props} profile={this.props.profile} status={this.props.status}\n                    updateStatus={this.props.updateStatus}\n                />\n            </div >\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n\n    return {\n        profile: state.profilePage.profile,\n        status: state.profilePage.status,\n        authorizedUserId: state.auth.userId,\n        isAuth: state.auth.isAuth\n    }\n}\n\nexport default compose(\n    connect(mapStateToProps, { getUserProfile, getStatus, updateStatus }),\n    withRouter,\n    // withAuthRedirect\n)(ProfileConteiners)\n"],"sourceRoot":""}
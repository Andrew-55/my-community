{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPost/MyPosts.module.css","components/Profile/MyPost/Post/Post.module.css","components/Profile/ProfileInfo/ProfileDataForm.jsx","components/Profile/ProfileInfo/ProfileStatusHooks.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPost/Post/Post.jsx","components/Profile/MyPost/MyPosts.jsx","components/Profile/MyPost/MyPostsConteiners.js","components/Profile/Profile.jsx","components/Profile/ProfileConteiners.js"],"names":["module","exports","ProfileDataFormReduxForm","reduxForm","form","handleSubmit","profile","error","onSubmit","className","style","formSymmaryError","creatField","Input","type","Texterea","Object","keys","contacts","map","key","classes","contact","ProfileStatusHooks","props","useState","editMove","setEditMove","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileData","isOwner","goTOEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","ProfileInfo","savePhoto","saveProfile","descriptionBlock","src","photos","large","userPhoto","mainPhoto","alt","target","files","length","initialValues","formData","then","Post","item","message","count","maxLenght10","maxLenghtCreator","AddNewPostReduxForm","Field","component","name","placeholder","validate","required","MyPosts","React","memo","postsElements","posts","reverse","post","likecount","myPostsBlock","values","addPost","newPostText","MyPostsConteiner","connect","state","profilePage","dispatch","addPostActionCreator","Profile","store","ProfileConteiners","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.abf02613.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3cd8Y\",\"img\":\"ProfileInfo_img__1lpBU\",\"mainPhoto\":\"ProfileInfo_mainPhoto__1Fgjo\",\"contact\":\"ProfileInfo_contact__1N3gp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myPostsBlock\":\"MyPosts_myPostsBlock__3GdsE\",\"posts\":\"MyPosts_posts__Vx8ZF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__ueSlo\"};","import React from 'react';\nimport { creatField, Input, Texterea } from '../../common/FormsControls/FormsControls';\nimport { reduxForm } from 'redux-form';\nimport classes from './ProfileInfo.module.css';\nimport style from '../../common/FormsControls/FormsControls.module.css';\n\nexport const ProfileDataForm = ({ handleSubmit, profile, error }) => {\n    return <form onSubmit={handleSubmit}>\n        <div><button >save</button></div>\n        {error && <div className={style.formSymmaryError}>\n            {error}\n        </div>}\n        <div>\n            <b>Full name</b>: {creatField(\"Full name\", \"fullName\", [], Input)}\n        </div>\n        <div>\n            <b>Looking for a job</b>: {creatField(\"\", \"lookingForAJob\", [], Input, { type: \"checkbox\" })}\n        </div>\n        <div>\n            <b>My professional skills</b>: {creatField(\"My professional skills\", \"lookingForAJobDescription\", [], Texterea)}\n        </div>\n        <div>\n            <b>About me</b>: {creatField(\"About me\", \"aboutMe\", [], Texterea)}\n        </div>\n        <div>\n            <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\n                return <div className={classes.contact}>\n                    <b>{key}: {creatField(key, \"contacts.\" + key, [], Input)}</b>\n                </div>\n            })}\n        </div>\n    </form>\n}\n\nexport const ProfileDataFormReduxForm = reduxForm({ form: 'edit-profile' })(ProfileDataForm)","import React, { useState, useEffect } from 'react';\n//import classes from './ProfileInfo.module.css';\n\nconst ProfileStatusHooks = (props) => {\n\n    let [editMove, setEditMove] = useState(false);\n    let [status, setStatus] = useState(props.status);\n\n    useEffect(() => {\n        setStatus(props.status);\n    }, [props.status]);\n\n    const activeteEditMode = () => {\n        setEditMove(true);\n    }\n    const deActiveteEditMode = () => {\n        setEditMove(false);\n        props.updateStatus(status)\n    }\n    const onStatusChange = (e) => {\n\n        setStatus(\n            e.currentTarget.value\n        );\n    }\n\n    return (\n        <div>\n            {!editMove &&\n                <div>\n                    <b>status: </b><span onDoubleClick={activeteEditMode}  >{props.status || '---'}</span>\n                </div>\n            }\n            {\n                editMove &&\n                <div>\n                    <input onChange={onStatusChange} autoFocus={true} onBlur={deActiveteEditMode}\n                        value={status}\n\n                    />\n                </div>\n            }\n        </div >\n    )\n}\n\nexport default ProfileStatusHooks;\n","import React, { useState } from 'react';\nimport { ProfileDataFormReduxForm } from './ProfileDataForm';\nimport classes from './ProfileInfo.module.css';\nimport Preloarder from '../../common/Preloarder/Preloader';\nimport ProfileStatusHooks from './ProfileStatusHooks';\nimport userPhoto from '../../../assets/images/User_default.png';\n\n\nconst ProfileInfo = ({ profile, status, updateStatus, isOwner, savePhoto, saveProfile }) => {\n    let [editMove, setEditMove] = useState(false);\n\n    if (!profile) {\n        return <Preloarder />\n    }\n\n\n    const onMainConstSelect = (e) => {\n        if (e.target.files.length) {\n            savePhoto(e.target.files[0]);\n        };\n    }\n    const onSubmit = (formData) => {\n        saveProfile(formData).then(() => {\n            setEditMove(false);\n        });\n\n    }\n\n    return (\n        <div>\n            <div className={classes.descriptionBlock}>\n                <img src={profile.photos.large || userPhoto} className={classes.mainPhoto} alt='' />\n                <div>{isOwner && <input type={\"file\"} onChange={onMainConstSelect} />}</div>\n                {editMove ? <ProfileDataFormReduxForm initialValues={profile} profile={profile} onSubmit={onSubmit} />\n                    : <ProfileData profile={profile} isOwner={isOwner}\n                        goTOEditMode={() => { setEditMove(true) }} />}\n                <div><ProfileStatusHooks status={status} updateStatus={updateStatus} /></div>\n            </div>\n        </div>\n    )\n}\n\nconst ProfileData = ({ profile, isOwner, goTOEditMode }) => {\n    return <div>\n        {isOwner && <div><button onClick={goTOEditMode} >edit</button></div>}\n        <div>\n            <b>Full name</b>: {profile.fullName}\n        </div>\n        <div>\n            <b>Looking for a job</b>: {profile.lookingForAJob ? \"yes\" : \"no\"}\n        </div>\n        {profile.lookingForAJob &&\n            <div>\n                <b>My professional skills</b>: {profile.lookingForAJobDescription}\n            </div>}\n        <div>\n            <b>About me</b>: {profile.aboutMe ? profile.aboutMe : \"no\"}\n        </div>\n        <div>\n            <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\n                return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]} />\n            })}\n        </div>\n    </div>\n}\n\nconst Contact = ({ contactTitle, contactValue }) => {\n    return <div className={classes.contact}>\n        <b>{contactTitle}</b>: {contactValue}\n    </div>\n}\n\nexport default ProfileInfo;\n","import React from 'react';\nimport classes from './Post.module.css';\n\nconst Post = (props) => {\n    return (\n\n        <div className={classes.item}>\n            <img src='https://klike.net/uploads/posts/2019-03/1551511862_28.jpg' alt='' />\n            {props.message}\n            <div>\n                <span>like {props.count}</span>\n            </div>\n        </div>\n\n    )\n}\n\nexport default Post;\n","import React from 'react';\nimport classes from './MyPosts.module.css';\nimport Post from './Post/Post';\n//import { Redirect } from 'react-router-dom';\nimport { Field, reduxForm } from 'redux-form';\nimport { required, maxLenghtCreator } from '../../../redux/utils/validators/validators';\nimport { Texterea } from '../../common/FormsControls/FormsControls';\n\n\nconst maxLenght10 = maxLenghtCreator(10);\n\nconst AddNewPostForm = (props) => {\n\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field component={Texterea} name=\"newPostText\" placeholder={'Post add'}\n                    validate={[required, maxLenght10]} />\n            </div>\n            <div>\n                <button >Add post</button>\n            </div>\n        </form>\n    )\n}\n\nconst AddNewPostReduxForm = reduxForm({\n    // a unique name for the form\n    form: 'ProfileAddNewPostForm'\n})(AddNewPostForm)\n\n\nconst MyPosts = React.memo((props) => {\n\n    let postsElements = [...props.posts].reverse().map(post => <Post message={post.message} count={post.likecount} />)\n\n    let onAddPost = (values) => {\n        props.addPost(values.newPostText);\n    }\n\n    return (\n\n        <div className={classes.myPostsBlock}>\n            <h3>My posts</h3>\n            <AddNewPostReduxForm onSubmit={onAddPost} />\n            <div className={classes.posts}>\n                {postsElements}\n            </div>\n        </div>\n    )\n});\n\nexport default MyPosts;\n","//import React from 'react';\nimport { addPostActionCreator } from '../../../redux/profileReducer';\nimport MyPosts from './MyPosts';\nimport { connect } from 'react-redux';\n\n\n\nlet mapStateToProps = (state) => {\n    return {\n        posts: state.profilePage.posts,\n        newPostText: state.profilePage.newPostText\n    }\n}\n\nlet mapDispatchToProps = (dispatch) => {\n    return {\n        addPost: (newPostText) => {\n            dispatch(addPostActionCreator(newPostText));\n        }\n    }\n}\n\n\nconst MyPostsConteiner = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\n\nexport default MyPostsConteiner;\n","import React from 'react';\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\nimport MyPostsConteiner from './MyPost/MyPostsConteiners';\n\n\nconst Profile = ({ profile, status, updateStatus, store, savePhoto, saveProfile, ...props }) => {\n\n    return (\n        <div className=''>\n            <ProfileInfo isOwner={props.isOwner}\n                profile={profile}\n                status={status}\n                updateStatus={updateStatus}\n                savePhoto={savePhoto}\n                saveProfile={saveProfile} />\n            <MyPostsConteiner store={store} />\n        </div >\n    )\n}\n\nexport default Profile;\n","import React from 'react';\nimport Profile from './Profile';\nimport { connect } from 'react-redux';\nimport { getUserProfile, getStatus, updateStatus, savePhoto, saveProfile } from '../../redux/profileReducer';\nimport { withRouter } from 'react-router-dom';\nimport { compose } from 'redux';\n\n\nclass ProfileConteiners extends React.Component {\n\n    refreshProfile() {\n        let userId = this.props.match.params.userId;\n        if (!userId) {\n            userId = this.props.authorizedUserId;\n            if (!userId) {\n                this.props.history.push(\"/login\");\n            }\n        }\n        this.props.getUserProfile(userId);\n        this.props.getStatus(userId);\n    }\n\n    componentDidMount() {\n\n        this.refreshProfile();\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\n            this.refreshProfile();\n        }\n    }\n\n    render() {\n\n        return (\n            <div className=''>\n                <Profile {...this.props}\n                    isOwner={!this.props.match.params.userId}\n                    profile={this.props.profile}\n                    status={this.props.status}\n                    updateStatus={this.props.updateStatus}\n                    savePhoto={this.props.savePhoto}\n                    saveProfile={this.props.saveProfile}\n                />\n            </div >\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n\n    return {\n        profile: state.profilePage.profile,\n        status: state.profilePage.status,\n        authorizedUserId: state.auth.userId,\n        isAuth: state.auth.isAuth\n    }\n}\n\nexport default compose(\n    connect(mapStateToProps, { getUserProfile, getStatus, updateStatus, savePhoto, saveProfile }),\n    withRouter,\n    // withAuthRedirect\n)(ProfileConteiners)\n"],"sourceRoot":""}